
call themis#option('recursive', 1)

let s:root = getcwd()

function! TddTestBeforeEach() abort
    execute 'cd' s:root
    call tdd#reset()
    call tdd#config#clear()
    call tdd#command#reset()
    call tdd#config#option('log', 'themis')
    call themis#log('')
endfunction

function! TddTestAfterEach() abort
    silent! %bwipeout!
    call tdd#config#clear()
endfunction

function! TddTestMock() abort
    let mock = {'__mock': {}}

    function! mock.add_fn(key) abort
        let mock_fn = s:mock_fn(a:key)
        let self['__mock'][a:key] = mock_fn
        let self[a:key] = {... -> self['__mock'][a:key].call(a:000)}
        return mock_fn
    endfunction

    function! mock.called(key) abort
        return has_key(self['__mock'], a:key) && self['__mock'][a:key].called()
    endfunction

    return mock
endfunction

function! s:mock_fn(key) abort
    let fn = {}

    function! fn.call(args) abort
        let self.args = a:args
    endfunction

    function! fn.called() abort
        return has_key(self, 'args')
    endfunction

    return fn
endfunction
